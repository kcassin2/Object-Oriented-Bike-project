public static void Sell(BikePart[] b, Scanner in, int numParts, DateFormat dateFormat, Date date) throws IOException {


		 


		System.out.println("Enter the warehouse you want to sell a part from:");
		String option = in.next();
		System.out.println();

		int totalParts = 0;

		try {
			FileReader fileReader = new FileReader(option);                       // Reads the file 
			BufferedReader bufferedReader = new BufferedReader(fileReader);			//new the buffered reader

			int i = 0;																 //set i = 0 for the first element in array
			String line;

			while((line = bufferedReader.readLine()) != null) {


				String [] parts = line.split(",");								//string array, to split the file line commas and stores them in the array


				b[i] = new BikePart();											// news the 0th index in the bp array
				b[i].setName(parts[0]);										//sets the name of part from the parts string array to the bp array
				b[i].setNumber(Integer.parseInt(parts[1]));					//sets the number of the part from the parts array to the bp array
				b[i].setPrice(Double.parseDouble(parts[2]));        			// sets the price of the part from the part array to the bp array
				b[i].setsPrice(Double.parseDouble(parts[3]));                  //sets the sales price from parts array to the bp array
				b[i].setSale(Boolean.parseBoolean(parts[4]));                  // sets the on sale from parts array to bp array
				b[i].setQuantity(Integer.parseInt(parts[5]));                   // sets the quantity from the parts array to the bp array


				totalParts++;                     // increment the number of parts that are stored in the array
				i++;                            //increments i for newing the bp array


			}   

			//close file
			bufferedReader.close();         
		}
		catch(FileNotFoundException x) {                  //catches error if it cannot open file 
			System.out.println("Unable to open file ");  
			System.out.println();
		}
		catch(IOException x) {                            // catches an error reading the file 
			System.out.println("Error reading file"); 
			System.out.println();
		}




		BufferedWriter writer = new BufferedWriter(new FileWriter(option));


		boolean Found = false;                                   //variable for an error message

		System.out.println("Enter part number: ");                 //ask user to enter part number and store it 
		int partNumber = in.nextInt();
		System.out.println();

		for(int i=0; i<totalParts; i++) {                            //for loop to go through array and if it is there then display its contents and time at it was sold
			if(partNumber == b[i].getNumber()) {
				int temp = b[i].getQuantity();                                     //temp variable to store that items quantity 
				temp = temp - 1;                                                    // decrement the temp value by 1 so it is sold
				b[i].setQuantity(temp);                                            //set the new temp variable to setQuantity of that index
				Found = true;                                                      // notFound = true, so item is in the array
				System.out.println("Part name: " + b[i].getName());
				if(b[i].getonSale() == true) {
					System.out.println("Sale Price:" + b[i].getsPrice());
				}else {
					System.out.println("List Price: " + b[i].getPrice());
				}
				System.out.println("Quantity: " + b[i].getQuantity());
				System.out.println("Part sold: " + (dateFormat.format(date)));


				for(int j=0; j<totalParts; j++) {
					if (b[j].getName().equals(b[j].getName())) {
						writer.write(b[j].getName() + "," + b[j].getNumber() + "," + b[j].getPrice() + "," + b[j].getsPrice() +       
								"," + b[j].getonSale() + "," + b[j].getQuantity() + "\n");
					}
				}


			}
		}

		if(!Found) {                                      //if item is not found print error message
			System.out.println("Not in array");
		}
		System.out.println();

		writer.close();

	}//end sell method
